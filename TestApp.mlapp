classdef TestApp < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure             matlab.ui.Figure
        TESTINGADILabel      matlab.ui.control.Label
        LogInLabel           matlab.ui.control.Label
        ExamineeButton       matlab.ui.control.Button
        AdministratorButton  matlab.ui.control.Button
    end

     % Add a property to store tests
    properties (Access = private)
        Tests = struct('name', {}, 'questions', {});
    end

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: AdministratorButton
        function AdministratorButtonPushed(app, event)

            
            
            % Create Administrator Page
            administratorFig = uifigure('Name', 'Administrator Page', 'Position', [100 100 800 600]);
            uilabel(administratorFig, 'Text', 'Enter Administrator Password:', 'Position', [200 350 400 50]);
            
            % Create Password Field
            passwordField = uieditfield(administratorFig, 'text');
            passwordField.Position = [200 300 400 50];
            
            % Create Submit Button
            submitButton = uibutton(administratorFig, 'push');
            submitButton.Position = [300 200 200 50];
            submitButton.Text = 'Submit';
            
            % Callback function for Submit Button
            submitButton.ButtonPushedFcn = @(btn, event) checkPassword(app, passwordField.Value, administratorFig);
        end
        
        % Function to check the password and open the next page
        function checkPassword(app, enteredPassword, administratorFig)
            correctPassword = '1';  % Replace with the actual password

            if strcmp(enteredPassword, correctPassword)
                % Close the password entry figure
                close(administratorFig);

                % Open the next page
                adminPage = uifigure('Name', 'Administrator Dashboard', 'Position', [200 100 800 600]);
                uilabel(adminPage, 'Text', 'Welcome to the Administrator Dashboard', 'Position', [200 550 400 50]);
           
                % Create Test Name Field
                testNameLabel = uilabel(adminPage, 'Text', 'Enter Test Name:', 'Position', [200 500 400 50]);
                testNameField = uieditfield(adminPage, 'text');
                testNameField.Position = [200 450 400 50];

                % Create Question Field
                questionLabel = uilabel(adminPage, 'Text', 'Enter Question:', 'Position', [200 400 400 50]);
                questionField = uieditfield(adminPage, 'text');
                questionField.Position = [200 350 400 50];
  
                % Create Answers Field
                answersLabel = uilabel(adminPage, 'Text', 'Enter Answers comma separated (A-Z):', 'Position', [200 300 400 50]);
                answersField = uieditfield(adminPage, 'text');
                answersField.Position = [200 250 400 50];

                % Create Correct Answer Field
                correctAnswerLabel = uilabel(adminPage, 'Text', 'Enter Correct Answer (A-Z):', 'Position', [200 200 400 50]);
                correctAnswerField = uieditfield(adminPage, 'text');
                correctAnswerField.Position = [200 150 400 50];

                % Create Save Question Button
                saveQuestionButton = uibutton(adminPage, 'push');
                saveQuestionButton.Position = [200 75 400 50];
                saveQuestionButton.Text = 'Save Question';

                saveQuestionButton.ButtonPushedFcn = @(btn, event) saveQuestion(app, testNameField.Value, questionField.Value, answersField.Value, correctAnswerField.Value);  
            else
                % Display an error message
                uialert(administratorFig, 'Incorrect Password. Please try again.', 'Error');
            end
        end

        % Function to save the question data
        function saveQuestion(app, testName, question, answers, correctAnswer)
            questionData.question = question;
            questionData.answers = strsplit(answers, ',');
            questionData.correctAnswer = correctAnswer;

            % Check if the test already exists
            testIndex = find(strcmp({app.Tests.name}, testName));
            if isempty(testIndex)
                % Create a new test
                newTest.name = testName;
                newTest.questions = questionData;
                app.Tests(end+1) = newTest;
            else
                % Add question to existing test
                app.Tests(testIndex).questions(end+1) = questionData;
            end

            % Confirm question saved
            uialert(gcf, 'Question saved successfully!', 'Success');
        end

        % Button pushed function: ExamineeButton
        function ExamineeButtonPushed(app, event)
           examineeFig = uifigure('Name', 'Examinee Page', 'Position', [100 100 800 600]);
            uilabel(examineeFig, 'Text', 'Enter your name:', 'Position', [200 500 400 50]);

            % Create Name Field
            nameField = uieditfield(examineeFig, 'text');
            nameField.Position = [200 450 400 50];

            % Create Test Selection Dropdown
            uilabel(examineeFig, 'Text', 'Select a test:', 'Position', [200 400 400 50]);
            testDropdown = uidropdown(examineeFig);
            testDropdown.Position = [200 350 400 50];
            testDropdown.Items = {app.Tests.name};

            % Create Submit Button
            submitButton = uibutton(examineeFig, 'push');
            submitButton.Position = [300 250 200 50];
            submitButton.Text = 'Start Test';

            % Callback function for Submit Button
            submitButton.ButtonPushedFcn = @(btn, event) showQuestion(app, nameField.Value, testDropdown.Value, examineeFig);
        end

        % Function to show the question and the examinee's name
        function showQuestion(app, examineeName, selectedTest, examineeFig)
            % Close the name entry figure
            close(examineeFig);

            % Find the selected test
            testIndex = find(strcmp({app.Tests.name}, selectedTest));
            if isempty(testIndex)
                uialert(gcf, 'Selected test not found.', 'Error');
                return;
            end

            currentTest = app.Tests(testIndex);
            if isempty(currentTest.questions)
                uialert(gcf, 'No questions in the selected test.', 'Error');
                return;
            end

            % Open the question page
            questionPage = uifigure('Name', 'Question Page', 'Position', [100 100 800 600]);
            uilabel(questionPage, 'Text', ['Examinee: ' examineeName], 'Position', [10 550 400 50]);
            uilabel(questionPage, 'Text', ['Test: ' selectedTest], 'Position', [10 500 400 50]);

            % Display the first question
            displayQuestion(app, questionPage, currentTest, 1, examineeName);
        end

        function displayQuestion(app, questionPage, currentTest, questionIndex, examineeName)
            % Clear previous components
            delete(findall(questionPage.Children, 'Type', 'UIControl'));

            questionData = currentTest.questions(questionIndex);
            uilabel(questionPage, 'Text', questionData.question, 'Position', [200 450 400 50]);

            % Create buttons for each answer
            answers = questionData.answers;
            numAnswers = length(answers);
            for i = 1:numAnswers
                answerButton = uibutton(questionPage, 'push');
                answerButton.Position = [200 400-(i*50) 400 50];
                answerButton.Text = [char(64+i) '. ' strtrim(answers{i})];  % Label buttons A, B, C, etc.
                answerButton.ButtonPushedFcn = @(btn, event) submitAnswer(app, examineeName, char(64+i), questionPage, currentTest, questionIndex);
            end
        end

        % Function to submit the answer and move to the next question or finish the test
        function submitAnswer(app, examineeName, selectedAnswer, questionPage, currentTest, questionIndex)
            % Get the correct answer
            correctAnswer = currentTest.questions(questionIndex).correctAnswer;

            % Determine if the answer is correct
            isCorrect = strcmp(selectedAnswer, correctAnswer);
            score = isCorrect;

            % Store the result (you might want to accumulate scores here)

            % Move to the next question or finish the test
            if questionIndex < length(currentTest.questions)
                displayQuestion(app, questionPage, currentTest, questionIndex + 1, examineeName);
            else
                % Test finished, display results
                close(questionPage);
                resultPage = uifigure('Name', 'Test Results', 'Position', [100 100 800 600]);
                uilabel(resultPage, 'Text', ['Test completed, ' examineeName '!'], 'Position', [200 500 400 50]);
                % Here you would calculate and display the final score
            end
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Position = [100 100 1024 749];
            app.UIFigure.Name = 'MATLAB App';

            % Create AdministratorButton
            app.AdministratorButton = uibutton(app.UIFigure, 'push');
            app.AdministratorButton.ButtonPushedFcn = createCallbackFcn(app, @AdministratorButtonPushed, true);
            app.AdministratorButton.Position = [294 399 347 30];
            app.AdministratorButton.Text = 'Administrator';

            % Create ExamineeButton
            app.ExamineeButton = uibutton(app.UIFigure, 'push');
            app.ExamineeButton.ButtonPushedFcn = createCallbackFcn(app, @ExamineeButtonPushed, true);
            app.ExamineeButton.Position = [294 280 347 36];
            app.ExamineeButton.Text = 'Examinee';

            % Create LogInLabel
            app.LogInLabel = uilabel(app.UIFigure);
            app.LogInLabel.HorizontalAlignment = 'center';
            app.LogInLabel.Position = [322 490 291 31];
            app.LogInLabel.Text = 'Log In';

            % Create TESTINGADILabel
            app.TESTINGADILabel = uilabel(app.UIFigure);
            app.TESTINGADILabel.FontSize = 30;
            app.TESTINGADILabel.FontWeight = 'bold';
            app.TESTINGADILabel.Position = [382 585 195 38];
            app.TESTINGADILabel.Text = 'TESTING ADI';

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = TestApp

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end
