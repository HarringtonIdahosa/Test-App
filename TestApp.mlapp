classdef TestApp < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure             matlab.ui.Figure
        TESTINGADILabel      matlab.ui.control.Label
        LogInLabel           matlab.ui.control.Label
        ExamineeButton       matlab.ui.control.Button
        AdministratorButton  matlab.ui.control.Button
    end

     % Add a property to store tests
    properties (Access = private)
        Tests = struct('name', {}, 'questions', {});
    end

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: AdministratorButton
        function AdministratorButtonPushed(app, event)

            % Create Administrator Page
            administratorFig = uifigure('Name', 'Administrator Page', 'Position', [100 100 800 600]);
            uilabel(administratorFig, 'Text', 'Enter Administrator Password:', 'Position', [200 350 400 50]);
            
            % Create Password Field
            passwordField = uieditfield(administratorFig, 'text');
            passwordField.Position = [200 300 400 50];
            
            % Create Submit Button
            submitButton = uibutton(administratorFig, 'push');
            submitButton.Position = [300 200 200 50];
            submitButton.Text = 'Submit';
            
            % Callback function for Submit Button
            submitButton.ButtonPushedFcn = @(btn, event) checkPassword(app, passwordField.Value, administratorFig);
        end
    
       function checkPassword(app, enteredPassword, administratorFig)
    correctPassword = '1';  % Replace with the actual password

    if strcmp(enteredPassword, correctPassword)
        % Close the password entry figure
        close(administratorFig);

        % Open the test selection page
        testSelectionPage = uifigure('Name', 'Test Selection', 'Position', [200 100 800 600]);
        uilabel(testSelectionPage, 'Text', 'Select a test to edit or add a new test', 'Position', [200 550 400 50]);
   
        % Create Test Selection Dropdown
        testDropdown = uidropdown(testSelectionPage);
        testDropdown.Position = [200 500 400 50];
        
        % Set the Items property
        testNames = cellfun(@(x) x.name, num2cell(app.Tests), 'UniformOutput', false);
        testDropdown.Items = testNames;

        % Create Add Button
        addButton = uibutton(testSelectionPage, 'push');
        addButton.Position = [200 400 200 50];
        addButton.Text = 'Add New Test';
        addButton.ButtonPushedFcn = @(btn, event) addTest(app, testSelectionPage);

        % Create Edit Button
        editButton = uibutton(testSelectionPage, 'push');
        editButton.Position = [400 400 200 50];
        editButton.Text = 'Edit Test';
        editButton.ButtonPushedFcn = @(btn, event) editTest(app, testDropdown.Value, testSelectionPage);

        % Create Delete Button
        deleteTestButton = uibutton(testSelectionPage, 'push');
        deleteTestButton.Position = [300 300 200 50];
        deleteTestButton.Text = 'Delete Test';
        deleteTestButton.ButtonPushedFcn = @(btn,event) deleteTest(app, testDropdown);

        % Add a listener to enable/disable the Edit button based on dropdown selection
        addlistener(testDropdown, 'ValueChanged', @(src,event) updateEditButton(editButton, testDropdown));
       
    else
        % Display an error message
        uialert(administratorFig, 'Incorrect Password. Please try again.', 'Error');
    end
end  



        % Function to add a new test
        function addTest(app, testSelectionPage)
            % Close the test selection page
            close(testSelectionPage);

            % Open the test creation page
            createTestPage = uifigure('Name', 'Create New Test', 'Position', [200 100 800 600]);

            uilabel(createTestPage, 'Text', 'Enter Test Name:', 'Position', [200 500 400 50]);
            testNameField = uieditfield(createTestPage, 'text');
            testNameField.Position = [200 450 400 50];

            uilabel(createTestPage, 'Text', 'Enter Number of Questions:', 'Position', [200 400 400 50]);
            numQuestionsField = uieditfield(createTestPage, 'numeric');
            numQuestionsField.Position = [200 350 400 50];

            createButton = uibutton(createTestPage, 'push');
            createButton.Position = [300 250 200 50];
            createButton.Text = 'Create Test';
            createButton.ButtonPushedFcn = @(btn, event) createTestQuestions(app, testNameField.Value, numQuestionsField.Value, createTestPage);
        end

       function createTestQuestions(app, testName, numQuestions, createTestPage)
    % Close the create test page
    close(createTestPage);

    % Create a new test structure
    newTest.name = testName;
    newTest.questions = struct('question', {}, 'answers', {}, 'correctAnswer', {});

    % Open the question entry page
    questionPage = uifigure('Name', 'Enter Questions', 'Position', [200 100 800 600]);

    % Create Question Field
    questionLabel = uilabel(questionPage, 'Text', 'Enter Question:', 'Position', [200 500 400 50]);
    questionField = uieditfield(questionPage, 'text');
    questionField.Position = [200 450 400 50];

    % Create Answers Field
    answersLabel = uilabel(questionPage, 'Text', 'Enter Answers comma separated (A-Z):', 'Position', [200 400 400 50]);
    answersField = uieditfield(questionPage, 'text');
    answersField.Position = [200 350 400 50];

    % Create Correct Answer Field
    correctAnswerLabel = uilabel(questionPage, 'Text', 'Enter Correct Answer (A-Z):', 'Position', [200 300 400 50]);
    correctAnswerField = uieditfield(questionPage, 'text');
    correctAnswerField.Position = [200 250 400 50];

    % Create Save Question Button
    saveQuestionButton = uibutton(questionPage, 'push');
    saveQuestionButton.Position = [300 150 200 50];
    saveQuestionButton.Text = 'Save Question';

    % Counter for current question
    questionCounter = 1;

    % Create a label for the question counter
    uilabel(questionPage, 'Text', sprintf('Question %d of %d', questionCounter, numQuestions), 'Position', [300 550 200 50]);

    % Create a nested function to handle button clicks
    function saveQuestionButtonPushed(~, ~)
        saveQuestion(app, newTest, questionField, answersField, correctAnswerField, questionCounter, numQuestions, questionPage);
        questionCounter = questionCounter + 1;
        if questionCounter > numQuestions
           
            if isvalid(questionPage)
    close(questionPage);
end
        end
    end

    % Set the button callback
    saveQuestionButton.ButtonPushedFcn = @saveQuestionButtonPushed;
end

% Function to delete a test
function deleteTest(app, testDropdown)
    if ~strcmp(testDropdown.Value, 'Create New Test')
        testIndex = find(strcmp({app.Tests.name}, testDropdown.Value));
        if ~isempty(testIndex)
            app.Tests(testIndex) = [];
            
            % Update the dropdown items
            testNames = cellfun(@(x) x.name, num2cell(app.Tests), 'UniformOutput', false);
            testDropdown.Items = ['Create New Test', testNames];
            
            % Set the dropdown value to 'Create New Test' if all tests are deleted
            if isempty(testNames)
                testDropdown.Value = 'Create New Test';
            else
                testDropdown.Value = testNames{1};
            end
        end
    else
        % Display a message if 'Create New Test' is selected
        uialert(testDropdown.Parent, 'No test to delete', 'Warning');
    end
end


% Function to edit the selected test
function editTest(app, selectedTest, testSelectionPage)
    if isempty(selectedTest)
        uialert(testSelectionPage, 'Please select a test to edit', 'No Test Selected');
        return;
    end

    % Close the test selection page
    close(testSelectionPage);

    % Open the test editing page
    adminPage = uifigure('Name', 'Test Editor', 'Position', [200 100 800 600]);

    uilabel(adminPage, 'Text', ['Editing Test: ' selectedTest], 'Position', [200 550 400 50]);
    testNameField = uilabel(adminPage, 'Text', selectedTest);
    testNameField.Position = [200 500 400 50];

    % Display existing questions
    testIndex = find(strcmp({app.Tests.name}, selectedTest));
    if ~isempty(testIndex)
        questions = app.Tests(testIndex).questions;
        for i = 1:length(questions)
            uilabel(adminPage, 'Text', ['Q' num2str(i) ': ' questions(i).question], 'Position', [200 500-i*50 400 50]);
        end
    end

    % Create Question Field
    questionLabel = uilabel(adminPage, 'Text', 'Enter New Question:', 'Position', [200 400 400 50]);
    questionField = uieditfield(adminPage, 'text');
    questionField.Position = [200 350 400 50];

    % Create Answers Field
    answersLabel = uilabel(adminPage, 'Text', 'Enter Answers comma separated (A-Z):', 'Position', [200 300 400 50]);
    answersField = uieditfield(adminPage, 'text');
    answersField.Position = [200 250 400 50];

    % Create Correct Answer Field
    correctAnswerLabel = uilabel(adminPage, 'Text', 'Enter Correct Answer (A-Z):', 'Position', [200 200 400 50]);
    correctAnswerField = uieditfield(adminPage, 'text');
    correctAnswerField.Position = [200 150 400 50];

    % Create Save Question Button
    saveQuestionButton = uibutton(adminPage, 'push');
    saveQuestionButton.Position = [200 75 400 50];
    saveQuestionButton.Text = 'Save Question';

    saveQuestionButton.ButtonPushedFcn = @(btn, event) saveQuestion(app, selectedTest, questionField.Value, answersField.Value, correctAnswerField.Value);
end

function saveQuestion(app, newTest, questionField, answersField, correctAnswerField, questionCounter, numQuestions, questionPage)
    % Save the current question
    newTest.questions(questionCounter).question = questionField.Value;
    newTest.questions(questionCounter).answers = strsplit(answersField.Value, ',');
    newTest.questions(questionCounter).correctAnswer = correctAnswerField.Value;

    % Clear the fields for the next question
    questionField.Value = '';
    answersField.Value = '';
    correctAnswerField.Value = '';

    if questionCounter < numQuestions
        % Move to the next question
        questionCounter = questionCounter + 1;
        
        % Update the question counter label
        delete(findall(questionPage.Children, 'Type', 'UILabel', 'Text', sprintf('Question %d of %d', questionCounter-1, numQuestions)));
        uilabel(questionPage, 'Text', sprintf('Question %d of %d', questionCounter, numQuestions), 'Position', [300 550 200 50]);
    else
        % All questions have been entered, save the test
        app.Tests(end+1) = newTest;
        close(questionPage);
        uialert(app.UIFigure, 'Test created successfully', 'Success');
    end
        
            
        end

        % Button pushed function: ExamineeButton
        function ExamineeButtonPushed(app, event)

    examineeFig = uifigure('Name', 'Examinee Page', 'Position', [100 100 800 600]);
    uilabel(examineeFig, 'Text', 'Enter your name:', 'Position', [200 500 400 50]);

    % Create Name Field
    nameField = uieditfield(examineeFig, 'text');
    nameField.Position = [200 450 400 50];

    % Create Test Selection Dropdown
    uilabel(examineeFig, 'Text', 'Select a test:', 'Position', [200 400 400 50]);
    testDropdown = uidropdown(examineeFig);
    testDropdown.Position = [200 350 400 50];
    
    % Populate the dropdown with test names
    testNames = {app.Tests.name};
    if isempty(testNames)
        testNames = {'No tests available'};
    end
    testDropdown.Items = testNames;

    % Create Submit Button
    submitButton = uibutton(examineeFig, 'push');
    submitButton.Position = [300 250 200 50];
    submitButton.Text = 'Start Test';

    % Callback function for Submit Button
    submitButton.ButtonPushedFcn = @(btn, event) startTest(app, nameField.Value, testDropdown.Value, examineeFig);
end

        % Function to show the question and the examinee's name
        function showQuestion(app, examineeName, selectedTest, examineeFig)
            % Close the name entry figure
            close(examineeFig);

            % Find the selected test
            testIndex = find(strcmp({app.Tests.name}, selectedTest));
            if isempty(testIndex)
                uialert(gcf, 'Selected test not found.', 'Error');
                return;
            end

            currentTest = app.Tests(testIndex);
            if isempty(currentTest.questions)
                uialert(gcf, 'No questions in the selected test.', 'Error');
                return;
            end

            % Open the question page
            questionPage = uifigure('Name', 'Question Page', 'Position', [100 100 800 600]);
            uilabel(questionPage, 'Text', ['Examinee: ' examineeName], 'Position', [10 550 400 50]);
            uilabel(questionPage, 'Text', ['Test: ' selectedTest], 'Position', [10 500 400 50]);

            % Display the first question
            displayQuestion(app, questionPage, currentTest, 1, examineeName);
        end

        function startTest(app, examineeName, selectedTest, examineeFig)
    % Close the name entry figure
    close(examineeFig);

    % Find the selected test
    testIndex = find(strcmp({app.Tests.name}, selectedTest));
    if isempty(testIndex)
        uialert(app.UIFigure, 'Selected test not found.', 'Error');
        return;
    end

    currentTest = app.Tests(testIndex);
    if isempty(currentTest.questions)
        uialert(app.UIFigure, 'No questions in the selected test.', 'Error');
        return;
    end

    % Initialize the score
    currentTest.score = 0;

    % Open the question page
    questionPage = uifigure('Name', 'Test Page', 'Position', [100 100 800 600]);
    uilabel(questionPage, 'Text', ['Examinee: ' examineeName], 'Position', [10 550 400 50]);
    uilabel(questionPage, 'Text', ['Test: ' selectedTest], 'Position', [10 500 400 50]);

    % Display the first question
    displayQuestion(app, questionPage, currentTest, 1, examineeName);
        end



      function displayQuestion(app, questionPage, currentTest, questionIndex, examineeName)
    % Clear previous components
    delete(findall(questionPage.Children, 'Type', 'UIControl'));

    % Ensure the examinee name and test name labels remain
    uilabel(questionPage, 'Text', ['Examinee: ' examineeName], 'Position', [10 550 400 50]);
    uilabel(questionPage, 'Text', ['Test: ' currentTest.name], 'Position', [10 500 400 50]);

    questionData = currentTest.questions(questionIndex);
    uilabel(questionPage, 'Text', questionData.question, 'Position', [200 450 400 50]);

    % Create buttons for each answer
    answers = questionData.answers;
    numAnswers = length(answers);
    for i = 1:numAnswers
        answerButton = uibutton(questionPage, 'push');
        answerButton.Position = [200 400-(i*50) 400 50];
        answerButton.Text = [char(64+i) '. ' strtrim(answers{i})];  % Label buttons A, B, C, etc.
        answerButton.ButtonPushedFcn = @(btn, event) submitAnswer(app, examineeName, char(64+i), questionPage, currentTest, questionIndex);
    end

    % Add a label to show the current question number
    uilabel(questionPage, 'Text', sprintf('Question %d of %d', questionIndex, length(currentTest.questions)), 'Position', [10 450 200 50]);
end
  function submitAnswer(app, examineeName, selectedAnswer, questionPage, currentTest, questionIndex)
    % Get the correct answer
    correctAnswer = currentTest.questions(questionIndex).correctAnswer;

    % Determine if the answer is correct
    isCorrect = strcmp(selectedAnswer, correctAnswer);

    % Update the score
    currentTest.score = currentTest.score + isCorrect;

    % Move to the next question or finish the test
    if questionIndex < length(currentTest.questions)
        displayQuestion(app, questionPage, currentTest, questionIndex + 1, examineeName);
    else
        % Test finished, display results
        close(questionPage);
        resultPage = uifigure('Name', 'Test Results', 'Position', [100 100 800 600]);
        finalScore = currentTest.score;
        totalQuestions = length(currentTest.questions);
        uilabel(resultPage, 'Text', sprintf('Test Score: %d/%d', finalScore, totalQuestions), 'Position', [200 500 400 50]);
    end
       
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Position = [100 100 1026 749];
            app.UIFigure.Name = 'MATLAB App';

            % Create AdministratorButton
            app.AdministratorButton = uibutton(app.UIFigure, 'push');
            app.AdministratorButton.ButtonPushedFcn = createCallbackFcn(app, @AdministratorButtonPushed, true);
            app.AdministratorButton.Position = [294 399 347 30];
            app.AdministratorButton.Text = 'Administrator';

            % Create ExamineeButton
            app.ExamineeButton = uibutton(app.UIFigure, 'push');
            app.ExamineeButton.ButtonPushedFcn = createCallbackFcn(app, @ExamineeButtonPushed, true);
            app.ExamineeButton.Position = [294 280 347 36];
            app.ExamineeButton.Text = 'Examinee';

            % Create LogInLabel
            app.LogInLabel = uilabel(app.UIFigure);
            app.LogInLabel.HorizontalAlignment = 'center';
            app.LogInLabel.Position = [322 490 291 31];
            app.LogInLabel.Text = 'Log In';

            % Create TESTINGADILabel
            app.TESTINGADILabel = uilabel(app.UIFigure);
            app.TESTINGADILabel.FontSize = 30;
            app.TESTINGADILabel.FontWeight = 'bold';
            app.TESTINGADILabel.Position = [382 585 195 38];
            app.TESTINGADILabel.Text = 'TESTING ADI';

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = TestApp

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end
